
//private:
//	template<typename RandomAccessIterator>
//	static int partition(const RandomAccessIterator first, const int low, const int high)
//	{
//		auto tmp = first;
//		for (auto i = 0; i < high; ++i) {
//			++tmp;
//		}
//		auto pivot = tmp;
//		auto i = (low - 1);
//		for (auto j = low; j <= high - 1; ++j) {
//			if (first[j] <= *pivot) {
//				++i;
//				std::swap(first[i], first[j]);
//			}
//		}
//		std::swap(first[i + 1], first[high]);
//		return (i + 1);
//	}
//public:
//	template<typename RandomAccessIterator, typename Compare = std_cmp>
//	static	void Qsort(const RandomAccessIterator first, const int low, const int high, Compare comp = std_cmp())
//	{
//		if (low < high)
//		{
//			const int partition_indx = partition(first, low, high);
//			Qsort(first, low, partition_indx - 1, comp);
//			Qsort(first, partition_indx + 1, high, comp);
//		}
//	}

//static int Qsort(RandomAccessIterator begin, size_t elements, Compare comp = Compare())
//{
//	size_t left, right;
//	std::vector<size_t> begin_pos_container, end_pos_container;
//	int i = 0;
//	begin_pos_container.assign(MAX_DEPTH, 0);
//	end_pos_container.assign(MAX_DEPTH, elements);
//	while (i >= 0) {
//		left = begin_pos_container[i];
//		right = end_pos_container[i];
//		if (right - left > 1) {
//			if (i == MAX_DEPTH - 1) {
//				return -1;
//			}
//			size_t middle = left + ((right - left) >> 1);
//			auto pivot = begin[middle];
//			begin[middle] = begin[left];
//			--right;
//			while (left < right) {
//				while (!comp(pivot, begin[right]) && left < right) {
//					--right;
//				}
//				if (left < right) {
//					begin[left++] = begin[right];
//				}
//				while (!comp(begin[left], pivot) && left < right) {
//					++left;
//				}
//				if (left < right) {
//					begin[right--] = begin[left];
//				}
//			}
//			begin[left] = pivot;
//			middle = left + 1;
//			while (left > begin_pos_container[i] && (!comp(begin[left - 1], pivot) && !comp(pivot, begin[left - 1]))) {
//				--left;
//			}
//			while (middle < end_pos_container[i] && (!comp(begin[middle], pivot) && !comp(pivot, begin[middle]))) {
//				++middle;
//			}
//			if (left - begin_pos_container[i] > end_pos_container[i] - middle) {
//				begin_pos_container[i + 1] = middle;
//				end_pos_container[i + 1] = end_pos_container[i];
//				end_pos_container[i++] = left;
//			}
//			else {
//				begin_pos_container[i + 1] = begin_pos_container[i];
//				end_pos_container[i + 1] = left;
//				begin_pos_container[i++] = middle;
//			}
//		}
//		else {
//			--i;
//		}
//	}
//	return 0;
//}